// Groovy closures: just values that can be assigned to a variable, just like a number or a string
//                  they can capture variables from the scope in which they are declared

task groovy {}

def foo = "One million dollars"
def myClosure = {
    println "Hello from a closure"
    println "The value of foo is $foo"
}

myClosure()
def bar = myClosure
def baz = bar
baz()


// Closures have a different notation for arguments:
def doubleIt = { x -> x + x}


// Higher order functions: functions that take functions as arguments:
def applyTwice(func, arg){
    func(func(arg))
}

foo = 5
def fooDoubledTwice = applyTwice(doubleIt, foo)
println "Applying doubleIt twice to $foo equals $fooDoubledTwice"


// First class functions: language where functions are just objects that can be passed around
// Groovy allows for very sophisticated list processing using closures:

def myList = ["Gradle", "Groovy", "Android"]

def printItem = {item -> println "List item: $item"}
myList.each(printItem)

myList.each{println "Compactly printing each list item: $it"}


// Groovy syntax for declaring classes:
class GroovyGreeter {
    String greeting = "Default greeting"
    def printGreeting(){println "Greeting: $greeting"}
}

def myGroovyGreeter = new GroovyGreeter()

myGroovyGreeter.printGreeting()
myGroovyGreeter.greeting = "My custom greeting"
myGroovyGreeter.printGreeting()

/*
Closures can have a delegate object:
    Any variables or methods referenced in closure 
    that do not have a local definition are then evaluated against closure's delegate
Make a closure that will access property and method of our GroovyGreeter class
 */

def greetingClosure = {
    greeting = "Setting the greeting from a closure"
    printGreeting()
}

// greetingClosure() // This doesn't work, because `greeting` isn't defined
greetingClosure.delegate = myGroovyGreeter
greetingClosure()   // This works as `greeting` is a property of the delegate

/*
Resources:
http://learnxinyminutes.com/docs/groovy/
http://www.groovy-lang.org/documentation.html
 */

