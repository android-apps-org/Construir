/*

In this series of exercises we'll be practicing initializing and configuring
the Gradle wrapper. In this case you are given an empty project. You will use
your installed version of Gradle to "bootstrap" this project by adding the
wrapper files.

Exercises:

1. Run the 'wrapper' task to create the Gradle wrapper files
2. Use the wrapper to run the 'tasks' task
3. Configure the 'wrapper' task to use Gradle version 2.14.1.
4. Use the wrapper with the '--version' option to confirm it is using
   Gradle version 2.14.1
5. Modify the gradle-wrapper.properties file to use the latest Gradle
   nightly build

Hint: For more information on using Gradle nightly builds, check out the
Gradle website: http://gradle.org/gradle-nightly-build/


1. To generate the Gradle wrapper run: $ gradle wrapper

2. To use the wrapper to run the `tasks` task run:
    $ ./gradlew tasks [Mac]
    $ gradlew tasks [Windows]

3. You can configure the `wrapper` task to use a different version of Gradle

4. To use the updated version of the gradle Wrapper run the following:
    $ gradle wrapper
    $ ./gradlew -v [Mac]
    $ gradlew -v [Windows]

5. To get the wrapper to use the nightly build of Gradle, visit
http://gradle.org/gradle-nightly-build/ and follow the instructions to edit your
gradle.properties file. When you're done, your gradle.properties file should
look something like this:

#Mon Apr 06 17:32:39 PDT 2015
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions-snapshots/gradle-3.4-20170106000025+0000-bin.zip



Gradle wrapper: can put build tool under version control
    so everyone building your project is building it with exact same tool
Gradle wrapper is comprised of four files:
    a JAR, a properties file, a pair of scripts, a shell script for Unix and Mac (.bat for Windows), 
When you pass a command to one of these scripts, it will first check
if Gradle is installed, download it if necessary, then execute the command

A wrapper can be created by running the built-in 'wrapper' task
The wrapper scripts are placed in the root of your project directory and the other files
in the 'gradle/wrapper' directory

    $ ./gradlew tasks

If this is the first time using the wrapper, it will go ahead and download the
appropriate Gradle distribution and cache it locally. We can also explicitly
configure what version of Gradle to use by setting the `gradleVersion`
property on the 'wrapper' task. Let's set the version to '2.2' and run the
'wrapper' task again.
 */

wrapper {
    gradleVersion = '2.2'
    // gradleVersion = '2.14.1'
}

/*

If we haven't already downloaded this particular version of Gradle, the
wrapper will do so for us. Let's run the wrapper with the '--version' option
to confirm we are using the correct version.

    $ ./gradlew --version

As you can see, the wrapper is now using version 2.2 of Gradle. This
information is saved in the gradle-wrapper.properties file in the
'gradle/wrapper' directory. We can also set the wrapper version by modifying
this file. Let's set the version back to 2.3 by changing the value of of the
`distributionUrl` property.

Let's run the wrapper with the '--version' option and verify the
result.

    $ ./gradlew --version

The version is now 2.3. This is a really important feature, as it allows us to
centrally control what version of Gradle is used to build our project. In
practice, the Gradle wrapper files, to include the scripts, jar and properties
file, will be committed to source control. This serves two main functions.
First, it means that everything that is needed to get up and running with
development of our project is included in the source repository. Second, it
means that the Gradle version is also version controlled, which eliminates the
possibility that a developer encounters problems with the build due to using
the wrong version of Gradle.

 */
