// apply plugin: 'com.android.application'

plugins {
    id 'com.android.application'
    // id 'com.neenbedankt.android-apt'
}

android {
//    signingConfigs {
//        config {
//            storeFile file('keystore.jks')
//            // storeFile file("$rootDir/keystore.jks")
//            storePassword "$STORE_KEY"
//            keyAlias "$SIGNING_KEY"
//            keyPassword "$STORE_KEY"
//        }
//    }
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    defaultConfig {
        applicationId "com.jdemaagd.multi"
        minSdkVersion 22
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // signingConfig signingConfigs.config
            applicationIdSuffix 'com.jdemaagd.multi'
            versionNameSuffix '1.0'
        }
//        shrunk {
//            minifyEnabled true
//            shrinkResources true
//        }
//        big {
//            minifyEnabled false
//            shrinkResources false
//        }
    }

    flavorDimensions "testing"
    productFlavors {
        free {
            applicationId "com.jdemaagd.multi.free"
        }
        paid {
            applicationId "com.jdemaagd.multi.paid"
        }
    }
}

/*

Now we need to declare a compile time dependency on the project :javaJokes

This bit is a little tricky. The Java plugin defines an extra "default"
configuration we haven't talked about yet. It adds its output: its JAR, to
that configuration. When we declare our dependency on the :javaJokes project,
we're actually depending on the "default" configuration of :javaJokes, which
contains the output JAR.

*/

dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.13.1'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    // freeImplementation 'com.google.android.gms:play-services-ads:19.6.0'

    // proguard strips libraries if not used
    implementation 'com.google.android.gms:play-services:12.0.1'

    implementation project(':jokes')

    implementation project(":wizardJokes")
    implementation project(":manualJokes")

    implementation project(":imageactivity")

    implementation project(":jokedisplay")
    implementation project(":jokesource")

    androidTestImplementation('com.android.support.test.espresso:espresso-core:3.0.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    // implementation 'com.jakewharton.timber:timber:4.7.1'
    // implementation 'com.jakewharton:butterknife:10.2.3'

    // annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.3'
    // apt 'com.jakewharton:butterknife-compiler:10.2.3'
}


/*
Exercises:

1. Define a new task rule that matches a task name pattern of "bundle<Source>".
2. Task rule should define a new Zip task with the following properties:
    a) Archive name should be "<Source>.zip"
    b) Destination of archive should be "build" directory.
    c) Archive includes all files from "src/<Source>" directory.
*/

tasks.addRule("Pattern: bundle<Source>: Creates a bundle of a particular source collection.") { String taskName ->
    if (taskName.startsWith("bundle")) {                        // 1. Match all tasks with "bundle" prefix
        def sourceName = taskName.substring(6).toLowerCase()
        task(taskName, type: Zip) {                             // 2. Define a new Zip task with given task name
            archiveBaseName = sourceName                               // 2a. Make name of zip file the source name
            destinationDirectory = file('build')                // 2b. Place zip file in "build" directory

            from "src/$sourceName"                              // 2c. Include files from "src/<Source>" directory
        }
    }
}

